CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

OPTION(HUMMINGBIRD_DEPENDENCE_ZLIB "HUMMINGBIRD_DEPENDENCE_ZLIB" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_OPENSSL "HUMMINGBIRD_DEPENDENCE_OPENSSL" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_MONGO "HUMMINGBIRD_DEPENDENCE_MONGO" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_LUA "HUMMINGBIRD_DEPENDENCE_LUA" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_LZ4 "HUMMINGBIRD_DEPENDENCE_LZ4" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_LIBEVENT "HUMMINGBIRD_DEPENDENCE_LIBEVENT" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_JANSSON "HUMMINGBIRD_DEPENDENCE_LIBEVENT" ON)
OPTION(HUMMINGBIRD_DEPENDENCE_HIREDIS "HUMMINGBIRD_DEPENDENCE_HIREDIS" ON)

PROJECT(dependencies)

SET(HUMMINGBIRD_BUILD_TYPE_DEBUG OFF)
SET(HUMMINGBIRD_BUILD_TYPE_RELWITHDEBINFO OFF)
SET(HUMMINGBIRD_BUILD_TYPE_RELEASE OFF)

IF(CMAKE_BUILD_TYPE MATCHES "Debug")
    SET(HUMMINGBIRD_BUILD_TYPE_DEBUG ON)
ELSEIF(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
    SET(HUMMINGBIRD_BUILD_TYPE_RELWITHDEBINFO ON)
ELSEIF(CMAKE_BUILD_TYPE MATCHES "Release")
    SET(HUMMINGBIRD_BUILD_TYPE_RELEASE ON)
ELSE()
    MESSAGE(FATAL_ERROR "Non support build type: ${CMAKE_BUILD_TYPE}")
ENDIF()

if(HUMMINGBIRD_DEPENDENCE_ZLIB)
    message("================zlib================")
    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/zlib ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/zlib)
    
    set(ZLIB_LIBRARY zlib CACHE STRING "ZLIB_LIBRARY" FORCE)
    set(ZLIB_INCLUDE_DIR ${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/zlib CACHE INTERNAL "ZLIB_INCLUDE_DIR" FORCE)
endif()

if(HUMMINGBIRD_DEPENDENCE_OPENSSL)
    message("================openssl================")
    
    set(WITH_APPS OFF CACHE BOOL "WITH_APPS" FORCE)
    set(MSVC_DYNAMIC_RUNTIME OFF CACHE BOOL "MSVC_DYNAMIC_RUNTIME" FORCE)
    
    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/openssl ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/openssl)
    
    set(OPENSSL_ROOT_DIR ${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/openssl CACHE STRING "OPENSSL_ROOT_DIR" FORCE)
    set(OPENSSL_SSL_LIBRARIES ${HUMMINGBIRD_DEPENDENCIES_LIBRARY_DIRECTORY} CACHE STRING "OPENSSL_SSL_LIBRARIES" FORCE)
    set(OPENSSL_SSL_LIBRARY ${OPENSSL_SSL_LIBRARIES} CACHE STRING "OPENSSL_SSL_LIBRARY" FORCE)
    set(OPENSSL_CRYPTO_LIBRARIES ${HUMMINGBIRD_DEPENDENCIES_LIBRARY_DIRECTORY} CACHE STRING "OPENSSL_CRYPTO_LIBRARIES" FORCE)
    set(OPENSSL_CRYPTO_LIBRARY ${OPENSSL_CRYPTO_LIBRARIES} CACHE STRING "OPENSSL_CRYPTO_LIBRARY" FORCE)
    set(OPENSSL_LIBDIR ${HUMMINGBIRD_DEPENDENCIES_LIBRARY_DIRECTORY} CACHE STRING "OPENSSL_LIBDIR" FORCE)
    set(OPENSSL_LIBRARIES libssl_1_1.a libcrypto_1_1.a CACHE STRING "OPENSSL_LIBRARIES" FORCE)
    set(OPENSSL_INCLUDE_DIRS "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/openssl/include ${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/openssl/include" CACHE STRING "OPENSSL_INCLUDE_DIRS" FORCE)
    set(OPENSSL_INCLUDE_DIR ${OPENSSL_INCLUDE_DIRS} CACHE STRING "OPENSSL_INCLUDE_DIR" FORCE)
    set(OPENSSL_USE_STATIC_LIBS ON CACHE BOOL "OPENSSL_USE_STATIC_LIBS" FORCE)
    
    message("OPENSSL_ROOT_DIR: ${OPENSSL_ROOT_DIR}")
    message("OPENSSL_SSL_LIBRARIES: ${OPENSSL_SSL_LIBRARIES}")
    message("OPENSSL_CRYPTO_LIBRARIES: ${OPENSSL_CRYPTO_LIBRARIES}")
    message("OPENSSL_LIBDIR: ${OPENSSL_LIBDIR}")
    message("OPENSSL_LIBRARIES: ${OPENSSL_LIBRARIES}")
    message("OPENSSL_INCLUDE_DIRS: ${OPENSSL_INCLUDE_DIRS}")
    message("OPENSSL_USE_STATIC_LIBS: ${OPENSSL_USE_STATIC_LIBS}")
endif()

#dependencies jansson
if(HUMMINGBIRD_DEPENDENCE_JANSSON)
    message("================jansson================")
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson/CMakeLists.txt ${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/jansson/CMakeLists.txt COPYONLY)
    
    set(USE_URANDOM OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(USE_WINDOWS_CRYPTOAPI OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_STATIC_CRT ON CACHE BOOL "JANSSON_STATIC_CRT" FORCE)
    set(JANSSON_EXAMPLES OFF CACHE BOOL "USE_URANDOM" FORCE)
    set(JANSSON_BUILD_DOCS OFF CACHE BOOL "JANSSON_BUILD_DOCS" FORCE)
    set(JANSSON_WITHOUT_TESTS ON CACHE BOOL "JANSSON_WITHOUT_TESTS" FORCE)
    set(JANSSON_INSTALL OFF CACHE BOOL "JANSSON_INSTALL" FORCE)

    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/jansson ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/jansson)
endif()

#dependencies libevent
if(HUMMINGBIRD_DEPENDENCE_LIBEVENT)
    message("================libevent================")
    
    SET(EVENT__LIBRARY_TYPE STATIC CACHE STRING "EVENT__LIBRARY_TYPE" FORCE)
    
    if(HUMMINGBIRD_BUILD_TYPE_DEBUG)
        SET(EVENT__DISABLE_DEBUG_MODE OFF CACHE BOOL "EVENT__DISABLE_OPENSSL" FORCE)
    else()
        SET(EVENT__DISABLE_DEBUG_MODE ON CACHE BOOL "EVENT__DISABLE_OPENSSL" FORCE)
    endif()
    
    SET(EVENT__DISABLE_OPENSSL ON CACHE BOOL "EVENT__DISABLE_OPENSSL" FORCE)
    SET(EVENT__DISABLE_BENCHMARK ON CACHE BOOL "EVENT__DISABLE_BENCHMARK" FORCE)
    SET(EVENT__DISABLE_TESTS ON CACHE BOOL "EVENT__DISABLE_TESTS" FORCE)
    SET(EVENT__DISABLE_REGRESS ON CACHE BOOL "EVENT__DISABLE_REGRESS" FORCE)
    SET(EVENT__DISABLE_SAMPLES ON CACHE BOOL "EVENT__DISABLE_SAMPLES" FORCE)

    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/libevent ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/libevent)
    
    configure_file(
        "${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/libevent/include/event2/event-config.h"
        "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/libevent/install/event2/event-config.h"
        COPYONLY
    )    
endif()

#dependencies mongo
if(HUMMINGBIRD_DEPENDENCE_MONGO)
    message("================mongo================")
    
    SET(ENABLE_TESTS OFF CACHE BOOL "ENABLE_TESTS" FORCE)
    SET(ENABLE_EXAMPLES OFF CACHE BOOL "ENABLE_EXAMPLES" FORCE)
    SET(ENABLE_MAINTAINER_FLAGS OFF CACHE BOOL "ENABLE_MAINTAINER_FLAGS" FORCE)
    SET(ENABLE_AUTOMATIC_INIT_AND_CLEANUP ON CACHE BOOL "ENABLE_AUTOMATIC_INIT_AND_CLEANUP" FORCE)
    SET(ENABLE_CRYPTO_SYSTEM_PROFILE OFF CACHE BOOL "ENABLE_CRYPTO_SYSTEM_PROFILE" FORCE)
    SET(ENABLE_TRACING OFF CACHE BOOL "ENABLE_TRACING" FORCE)
    SET(ENABLE_COVERAGE OFF CACHE BOOL "ENABLE_COVERAGE" FORCE)
    SET(ENABLE_MAN_PAGES OFF CACHE BOOL "ENABLE_MAN_PAGES" FORCE)
    SET(ENABLE_HTML_DOCS OFF CACHE BOOL "ENABLE_HTML_DOCS" FORCE)
    SET(ENABLE_EXTRA_ALIGNMENT ON CACHE BOOL "ENABLE_EXTRA_ALIGNMENT" FORCE)
    SET(ENABLE_RDTSCP OFF CACHE BOOL "ENABLE_RDTSCP" FORCE)
    SET(ENABLE_APPLE_FRAMEWORK OFF CACHE BOOL "ENABLE_APPLE_FRAMEWORK" FORCE)
    SET(ENABLE_UNINSTALL OFF CACHE BOOL "ENABLE_UNINSTALL" FORCE)
    SET(ENABLE_SSL "AUTO" CACHE STRING "ENABLE_SSL" FORCE)
    SET(ENABLE_SASL OFF CACHE BOOL "ENABLE_SASL" FORCE)
    SET(ENABLE_ZLIB BUNDLED CACHE BOOL "ENABLE_ZLIB" FORCE) 
    SET(ENABLE_ZSTD OFF CACHE BOOL "ENABLE_ZSTD" FORCE)
    
    SET(ENABLE_STATIC "ON" CACHE STRING "Build static libmongoc. Set to ON/AUTO/OFF, default AUTO." FORCE)
        
    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/mongo ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/mongo)
    
    configure_file(
        "${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/mongo/src/libmongoc/src/mongoc/mongoc-config.h"
        "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/mongo/install/mongoc/mongoc-config.h"
        COPYONLY
    )    
    
    configure_file(
        "${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/mongo/src/libmongoc/src/mongoc/mongoc-version.h"
        "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/mongo/install/mongoc/mongoc-version.h"
        COPYONLY
    )    
    
    configure_file(
        "${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/mongo/src/libbson/src/bson/bson-config.h"
        "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/mongo/install/bson/bson-config.h"
        COPYONLY
    )
    
    configure_file(
        "${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/mongo/src/libbson/src/bson/bson-version.h"
        "${HUMMINGBIRD_CONFIGURATION_DIRECTORY}/mongo/install/bson/bson-version.h"
        COPYONLY
    )
endif()

#dependencies hiredis
if(HUMMINGBIRD_DEPENDENCE_HIREDIS)
    message("================hiredis================")
    
    SET(ENABLE_SSL OFF CACHE BOOL "ENABLE_SSL" FORCE)
    SET(DISABLE_TESTS ON CACHE BOOL "DISABLE_TESTS" FORCE)
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/hiredis/CMakeLists.txt ${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/hiredis/CMakeLists.txt COPYONLY)
    
    ADD_SUBDIRECTORY(${HUMMINGBIRD_DEPENDENCIES_SOURCE_DIRECTORY}/hiredis ${HUMMINGBIRD_DEPENDENCIES_TEMP_DIRECTORY}/hiredis)
endif()

#dependencies lua
if(HUMMINGBIRD_DEPENDENCE_LUA)
    message("================lua================")
    
    ADD_SUBDIRECTORY(lua)
endif()

#dependencies lz4
if(HUMMINGBIRD_DEPENDENCE_LZ4)
    message("================lz4================")
    
    ADD_SUBDIRECTORY(lz4)
endif()